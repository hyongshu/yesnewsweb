{"version":3,"sources":["config/app.js","pages/Layout.js","pages/index.js","pages/About.js","utils/request.js","utils/date.js","pages/NewsDetails.js","App.js","serviceWorker.js","index.js"],"names":["apiUrl","module","exports","api","news","search","query","updateNewsUserAccess","getDepartments","Layout","props","state","this","children","Component","index","About","RequestUtil","url","_apiToken","params","console","log","fetch","method","headers","Accept","body","JSON","stringify","then","response","json","apiToken","DateUtil","dateString","date","Date","getDate","getMonth","getFullYear","componentDidMount","a","fetchJSON","appConfig","match","auth","id","data","imageList","attachmentList","fileExtensionReg","map","item","exec","push","source","uri","setState","detail","catch","error","image","postedBy","title","src","alt","width","height","className","getFormattedDate","ReactHtmlParser","length","style","flexDirection","flexWrap","paddingTop","paddingRight","paddingLeft","href","name","App","class","basename","exact","path","component","Home","NewsDetails","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.611130c7.chunk.js","sourcesContent":["\nconst apiUrl = 'https://portal.yamaha-motor.co.th/api'\n\nmodule.exports = {\n    api: {\n        news: {\n            search: `${apiUrl}/news/search`,\n            query: `${apiUrl}/news/query`,\n            updateNewsUserAccess: `${apiUrl}/news/updateNewsUserAccess`,\n            getDepartments: `${apiUrl}/news/getDepartments`,\n        },\n    },\n}","import React, { Component } from 'react';\n\nexport default class Layout extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.children}\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\n\nexport default class index extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>YES NEWS</h1>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\n\nexport default class About extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  render() {\n    return (\n        <div>\n            <h1>About Us</h1>\n        </div>\n    );\n  }\n}\n","export default class RequestUtil {\n\n    //static _apiToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJuaXJhbmQiLCJpYXQiOjE1ODgyNTg3MzB9.XGQmtTbHtcYdLd0FWnOlUJEsupww9lesbDZ1qULvDY0' || null\n\n    static fetchJSON(url, _apiToken, params = {}) {\n        console.log(url, params)\n        return fetch(url, {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json; charset=UTF-8',\n                'Authorization': `Bearer ${_apiToken || ''}`\n            },\n            body: JSON.stringify(params),\n        }).then((response) => response.json());\n    }\n\n    static setAPIToken(apiToken) {\n        this._apiToken = apiToken;\n    }\n}","export default class DateUtil {\n\n    static getFormattedDate(dateString) {\n        const date = new Date(dateString)\n        return `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`\n    }\n\n}","import React, { Component } from 'react';\nimport ReactHtmlParser from 'react-html-parser';\nimport appConfig from '../config/app';\nimport RequestUtil from '../utils/request';\nimport DateUtil from '../utils/date';\n\nexport default class index extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            detail: [],\n            imageList: [],\n            attachmentList: [],\n        };\n    }\n\n    componentDidMount = async () => {\n\n        RequestUtil.fetchJSON(appConfig.api.news.query,\n            this.props.match.params.auth, {\n            id: this.props.match.params.id,\n        }).then((response) => {\n            console.log(response.data)\n            if (response.data) {\n                let imageList = []\n                let attachmentList = []\n                const fileExtensionReg = /(?:\\.([^.]+))?$/\n                response.data.attachmentList.map(item => {\n                    const fileExtension = fileExtensionReg.exec(item.url)[1]\n                    switch (fileExtension) {\n                        case 'jpg':\n                        case 'jpeg':\n                        case 'png':\n                        case 'gif':\n                            imageList.push({\n                                ...item,\n                                source: {\n                                    uri: item.url,\n                                }\n                            })\n                            break\n                        default:\n                            attachmentList.push(item)\n                    }\n                })\n                this.setState({\n                    detail: response.data.detail,\n                    imageList,\n                    attachmentList,\n                })\n            } else {\n                console.log('error!!!')\n            }\n        }).catch((error) => {\n            console.log(error)\n        });\n\n    };\n\n    render() {\n\n        const { date, detail, image, postedBy, title } = this.state.detail\n\n        return (\n            <div>\n                <img src={image} alt=\"Pic\" width=\"100%\" height=\"100%\" />\n                <div className='content'>\n                    <strong>{title}</strong>\n\n                    <div>\n                        <p className='fontRed inline'> {`Date: ${DateUtil.getFormattedDate(date)}`}</p>\n                        <p className='inline'>| By: {postedBy}</p>\n                    </div>\n\n                    <div>{ReactHtmlParser(detail)}</div>\n\n                    {\n                        this.state.imageList.length > 0 && (\n                            <div\n                                style={{\n                                    flexDirection: 'row',\n                                    flexWrap: 'wrap',\n                                    paddingTop: 8,\n                                    paddingRight: 8,\n                                    paddingLeft: 16,\n                                }}\n                            >\n                                {\n                                    this.state.imageList.map((item, index) => (\n                                        <img src={item.url} alt=\"Pic\" width=\"100%\" />\n                                    ))\n                                }\n                            </div>\n                        )\n                    }\n\n\n                    {\n                        this.state.attachmentList.length > 0 && (\n                            <div className=\"attachFile\">\n                                {\n                                    this.state.attachmentList.map(item => (\n                                        <p className=\"fontAttachFile\">\n                                            <a className=\"fontRed\" href={item.url}>{item.name}</a>\n                                        </p>\n                                    ))\n                                }\n                            </div>\n                        )\n                    }\n\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\n//import history from './components/History';\nimport Layout from './pages/Layout';\nimport Home from './pages/index';\nimport About from './pages/About';\nimport NewsDetails from './pages/NewsDetails';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div class='body'>\n        <BrowserRouter basename='/'>\n          {/* <Router history={history}> */}\n            <Switch>\n              <Layout>\n                <Route exact path={`/`} component={Home} />\n                <Route path={`/about`} component={About} />\n                <Route exact path={`/newsdetails/:id/:auth`} component={NewsDetails} />\n              </Layout>\n            </Switch>\n          {/* </Router> */}\n        </BrowserRouter>\n      </div>\n    )\n  }\n}\n\n export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}